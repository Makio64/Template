var Stage3d;

Stage3d = (function() {
  function Stage3d() {}

  Stage3d.camera = null;

  Stage3d.cameraTarget = null;

  Stage3d.scene = null;

  Stage3d.projector = null;

  Stage3d.renderer = null;

  Stage3d.init = function() {
    var HEIGHT, WIDTH;
    WIDTH = window.innerWidth;
    HEIGHT = window.innerHeight;
    this.camera = new THREE.PerspectiveCamera(40, WIDTH / HEIGHT, 1, 10000);
    this.camera.position.z = 15000;
    this.cameraTarget = new THREE.Vector3(0, 0, 300);
    this.scene = new THREE.Scene();
    this.projector = new THREE.Projector();
    this.renderer = new THREE.WebGLRenderer({
      alpha: true
    });
    this.renderer.setSize(WIDTH, HEIGHT);
    document.body.appendChild(this.renderer.domElement);
  };

  Stage3d.render = function() {
    this.camera.position.x += (this.cameraTarget.x - this.camera.position.x) * 0.05;
    this.camera.position.y += (this.cameraTarget.y - this.camera.position.y) * 0.05;
    this.camera.position.z += (this.cameraTarget.z - this.camera.position.z) * 0.05;
    this.camera.lookAt(this.scene.position);
    Stage3d.renderer.render(this.scene, this.camera);
  };

  Stage3d.resize = function() {
    this.camera.aspect = window.innerWidth / window.innerHeight;
    this.camera.updateProjectionMatrix();
    this.renderer.setSize(window.innerWidth, window.innerHeight);
  };

  return Stage3d;

})();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvcmUvM2QvU3RhZ2UzZC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsSUFBQSxPQUFBOztBQUFBO3VCQUVDOztBQUFBLEVBQUEsT0FBQyxDQUFBLE1BQUQsR0FBVSxJQUFWLENBQUE7O0FBQUEsRUFDQSxPQUFDLENBQUEsWUFBRCxHQUFnQixJQURoQixDQUFBOztBQUFBLEVBRUEsT0FBQyxDQUFBLEtBQUQsR0FBUyxJQUZULENBQUE7O0FBQUEsRUFHQSxPQUFDLENBQUEsU0FBRCxHQUFhLElBSGIsQ0FBQTs7QUFBQSxFQUlBLE9BQUMsQ0FBQSxRQUFELEdBQVksSUFKWixDQUFBOztBQUFBLEVBTUEsT0FBQyxDQUFBLElBQUQsR0FBUSxTQUFBLEdBQUE7QUFDUCxRQUFBLGFBQUE7QUFBQSxJQUFBLEtBQUEsR0FBUSxNQUFNLENBQUMsVUFBZixDQUFBO0FBQUEsSUFDQSxNQUFBLEdBQVMsTUFBTSxDQUFDLFdBRGhCLENBQUE7QUFBQSxJQUdBLElBQUMsQ0FBQSxNQUFELEdBQWMsSUFBQSxLQUFLLENBQUMsaUJBQU4sQ0FBeUIsRUFBekIsRUFBNkIsS0FBQSxHQUFRLE1BQXJDLEVBQTZDLENBQTdDLEVBQWdELEtBQWhELENBSGQsQ0FBQTtBQUFBLElBSUEsSUFBQyxDQUFBLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBakIsR0FBcUIsS0FKckIsQ0FBQTtBQUFBLElBS0EsSUFBQyxDQUFBLFlBQUQsR0FBb0IsSUFBQSxLQUFLLENBQUMsT0FBTixDQUFjLENBQWQsRUFBZ0IsQ0FBaEIsRUFBa0IsR0FBbEIsQ0FMcEIsQ0FBQTtBQUFBLElBT0EsSUFBQyxDQUFBLEtBQUQsR0FBYSxJQUFBLEtBQUssQ0FBQyxLQUFOLENBQUEsQ0FQYixDQUFBO0FBQUEsSUFRQSxJQUFDLENBQUEsU0FBRCxHQUFpQixJQUFBLEtBQUssQ0FBQyxTQUFOLENBQUEsQ0FSakIsQ0FBQTtBQUFBLElBVUEsSUFBQyxDQUFBLFFBQUQsR0FBZ0IsSUFBQSxLQUFLLENBQUMsYUFBTixDQUFvQjtBQUFBLE1BQUMsS0FBQSxFQUFNLElBQVA7S0FBcEIsQ0FWaEIsQ0FBQTtBQUFBLElBV0EsSUFBQyxDQUFBLFFBQVEsQ0FBQyxPQUFWLENBQW1CLEtBQW5CLEVBQTBCLE1BQTFCLENBWEEsQ0FBQTtBQUFBLElBYUEsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFkLENBQTBCLElBQUMsQ0FBQSxRQUFRLENBQUMsVUFBcEMsQ0FiQSxDQURPO0VBQUEsQ0FOUixDQUFBOztBQUFBLEVBdUJBLE9BQUMsQ0FBQSxNQUFELEdBQVUsU0FBQSxHQUFBO0FBQ1QsSUFBQSxJQUFDLENBQUEsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFqQixJQUFzQixDQUFDLElBQUMsQ0FBQSxZQUFZLENBQUMsQ0FBZCxHQUFnQixJQUFDLENBQUEsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFsQyxDQUFBLEdBQXFDLElBQTNELENBQUE7QUFBQSxJQUNBLElBQUMsQ0FBQSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQWpCLElBQXNCLENBQUMsSUFBQyxDQUFBLFlBQVksQ0FBQyxDQUFkLEdBQWdCLElBQUMsQ0FBQSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQWxDLENBQUEsR0FBcUMsSUFEM0QsQ0FBQTtBQUFBLElBRUEsSUFBQyxDQUFBLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBakIsSUFBc0IsQ0FBQyxJQUFDLENBQUEsWUFBWSxDQUFDLENBQWQsR0FBZ0IsSUFBQyxDQUFBLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBbEMsQ0FBQSxHQUFxQyxJQUYzRCxDQUFBO0FBQUEsSUFJQSxJQUFDLENBQUEsTUFBTSxDQUFDLE1BQVIsQ0FBZSxJQUFDLENBQUEsS0FBSyxDQUFDLFFBQXRCLENBSkEsQ0FBQTtBQUFBLElBS0EsT0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFqQixDQUF3QixJQUFDLENBQUEsS0FBekIsRUFBZ0MsSUFBQyxDQUFBLE1BQWpDLENBTEEsQ0FEUztFQUFBLENBdkJWLENBQUE7O0FBQUEsRUFnQ0EsT0FBQyxDQUFBLE1BQUQsR0FBVSxTQUFBLEdBQUE7QUFDVCxJQUFBLElBQUMsQ0FBQSxNQUFNLENBQUMsTUFBUixHQUFpQixNQUFNLENBQUMsVUFBUCxHQUFvQixNQUFNLENBQUMsV0FBNUMsQ0FBQTtBQUFBLElBQ0EsSUFBQyxDQUFBLE1BQU0sQ0FBQyxzQkFBUixDQUFBLENBREEsQ0FBQTtBQUFBLElBRUEsSUFBQyxDQUFBLFFBQVEsQ0FBQyxPQUFWLENBQW1CLE1BQU0sQ0FBQyxVQUExQixFQUFzQyxNQUFNLENBQUMsV0FBN0MsQ0FGQSxDQURTO0VBQUEsQ0FoQ1YsQ0FBQTs7aUJBQUE7O0lBRkQsQ0FBQSIsImZpbGUiOiJjb3JlLzNkL1N0YWdlM2QuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyIjIFxuIyBTdGFnZTNkIGZvciB0aHJlZS5qcyB3aXRoIGV2ZXJ5IGJhc2ljcyB5b3UgbmVlZFxuIyBAYXV0aG9yIERhdmlkIFJvbmFpIC8gTWFraW9wb2xpcy5jb20gLyBATWFraW82NCBcbiMgXG5jbGFzcyBTdGFnZTNkXG5cblx0QGNhbWVyYSA9IG51bGxcblx0QGNhbWVyYVRhcmdldCA9IG51bGxcblx0QHNjZW5lID0gbnVsbFxuXHRAcHJvamVjdG9yID0gbnVsbFxuXHRAcmVuZGVyZXIgPSBudWxsXG5cblx0QGluaXQgPSAoKS0+XG5cdFx0V0lEVEggPSB3aW5kb3cuaW5uZXJXaWR0aFxuXHRcdEhFSUdIVCA9IHdpbmRvdy5pbm5lckhlaWdodFxuXG5cdFx0QGNhbWVyYSA9IG5ldyBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYSggNDAsIFdJRFRIIC8gSEVJR0hULCAxLCAxMDAwMCApXG5cdFx0QGNhbWVyYS5wb3NpdGlvbi56ID0gMTUwMDBcblx0XHRAY2FtZXJhVGFyZ2V0ID0gbmV3IFRIUkVFLlZlY3RvcjMoMCwwLDMwMClcblxuXHRcdEBzY2VuZSA9IG5ldyBUSFJFRS5TY2VuZSgpXG5cdFx0QHByb2plY3RvciA9IG5ldyBUSFJFRS5Qcm9qZWN0b3IoKVxuXG5cdFx0QHJlbmRlcmVyID0gbmV3IFRIUkVFLldlYkdMUmVuZGVyZXIoe2FscGhhOnRydWV9KVxuXHRcdEByZW5kZXJlci5zZXRTaXplKCBXSURUSCwgSEVJR0hUIClcblxuXHRcdGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoQHJlbmRlcmVyLmRvbUVsZW1lbnQpXG5cdFx0cmV0dXJuXG5cblx0QHJlbmRlciA9ICgpLT5cblx0XHRAY2FtZXJhLnBvc2l0aW9uLnggKz0gKEBjYW1lcmFUYXJnZXQueC1AY2FtZXJhLnBvc2l0aW9uLngpKjAuMDVcblx0XHRAY2FtZXJhLnBvc2l0aW9uLnkgKz0gKEBjYW1lcmFUYXJnZXQueS1AY2FtZXJhLnBvc2l0aW9uLnkpKjAuMDVcblx0XHRAY2FtZXJhLnBvc2l0aW9uLnogKz0gKEBjYW1lcmFUYXJnZXQuei1AY2FtZXJhLnBvc2l0aW9uLnopKjAuMDVcblxuXHRcdEBjYW1lcmEubG9va0F0KEBzY2VuZS5wb3NpdGlvbilcblx0XHRTdGFnZTNkLnJlbmRlcmVyLnJlbmRlcihAc2NlbmUsIEBjYW1lcmEpXG5cdFx0cmV0dXJuXG5cblx0QHJlc2l6ZSA9ICgpLT5cblx0XHRAY2FtZXJhLmFzcGVjdCA9IHdpbmRvdy5pbm5lcldpZHRoIC8gd2luZG93LmlubmVySGVpZ2h0XG5cdFx0QGNhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4KClcblx0XHRAcmVuZGVyZXIuc2V0U2l6ZSggd2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodCApXG5cdFx0cmV0dXJuIl19